version: '3.8'

services:
  mysql:
    image: mysql:5.7@sha256:f57eef421000aaf8332a91ab0b6c96b3c83ed2a981c29e6528b21ce10197cd16
    env_file:
      - ./.docker/local.env
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      TZ: "US/Central"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    platform: linux/amd64
    ports:
      - '3309:3306'
    volumes:
      - .docker/mysql/schema:/docker-entrypoint-initdb.d:delegated

  localstack:
    image: localstack/localstack@sha256:9e672725b3937f55b69c5c6afe3311d3ac034aab753633ceb2779a1efbba5c7d
    env_file:
      - .docker/local.env
    environment:
      LOCALSTACK_HOST: localstack
      SERVICES: "kinesis,firehose,sqs,events"
    healthcheck:
      test:
        - CMD
        - bash
        - -c
        - curl --write-out '%{http_code}' --silent --output /dev/null http://localhost:4566/_localstack/health
      interval: 5s
      timeout: 10s
      start_period: 10s
    ports:
      - '4566:4566'
    volumes:
      - ./.docker/localstack:/etc/localstack/init/ready.d

  otlpcollector:
    image: amazon/aws-otel-collector@sha256:1addb52aaf4880455aaabcc934924d735212d95e81f5a5fa44ee6a61fa03b8f1
    command: --config=/etc/ecs/ecs-default-config.yaml --set=service.telemetry.logs.level=debug
    env_file:
      - .docker/local.env
    ports:
      - '4137:4137'
      - '4138:4138'

  snowplow:
    image: pocket/snowplow-micro:prod
    platform: linux/amd64
    ports:
      - '9090:9090'

  app:
    image: node:16@sha256:550f484fc5f314b575f5e397c9e2c71d7f218e59729fcda9ffa7ea1fc825dce7
    platform: linux/amd64
    working_dir: /app
    ports:
      - '4005:4005'
    volumes:
      - ./:/app
    env_file:
      - .docker/local.env
      - .env
    environment:
      - NODE_ENV=local
      - TZ=US/Central
    entrypoint: ./.docker/scripts/local-start.sh
    depends_on:
      localstack:
        condition: service_healthy
      mysql:
        condition: service_healthy
      otlpcollector:
        condition: service_started
      snowplow:
        condition: service_started
