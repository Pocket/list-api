version: 2.1

setup: true

orbs:
  pocket: pocket/circleci-orbs@1.3.1
  aws-cli: circleci/aws-cli@1.2.1
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2
  path-filtering: circleci/path-filtering@0.1.5
  continuation: circleci/continuation@0.3.1
  slack: circleci/slack@4.1

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

# Use for notifying failure of step
slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        branch_pattern: main
        event: fail
        template: basic_fail_1

jobs:
  apollo:
    docker:
      - image: cimg/base:2023.04@sha256:3460d41b9ad6276b9df0e54e3c22e5e28310ad832cc4627a178de5f7097da82d
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.11.1 | sh

            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: check service
          command: rover subgraph check pocket-client-api@current --schema /tmp/workspace/app_prod/dist/schema-generated.graphql --name=list
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service
                command: rover subgraph publish pocket-client-api@current --schema /tmp/workspace/app_prod/dist/schema-generated.graphql --routing-url https://list-api.readitlater.com/ --name=list
      - when:
          condition:
            equal: [dev, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service (dev)
                command: rover subgraph publish pocket-client-api@development --schema /tmp/workspace/app_prod/dist/schema-generated.graphql --routing-url https://list-api.getpocket.dev/ --name=list
  build:
    docker:
      - image: circleci/node:16.13.1@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      # Add user to npmrc
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      #Validate backstage entity.
      #Eventually this should be its own job, but they need to fix it, or we add it to our circleci orbs
      - backstage-entity-validator/validate:
          path: catalog-info.yaml
      - run:
          name: build code and generate composed schema
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json Dockerfile ./dist schema.graphql /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    description: Run integration tests against external services, e.g. MySQL
    docker:
      - image: circleci/node:16.13.1@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
      - image: mysql:5.6@sha256:20575ecebe6216036d25dab5903808211f1e9ba63dc7825ac20cb975e34cfcae
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          TZ: 'UTC'
      - image: localstack/localstack@sha256:9e672725b3937f55b69c5c6afe3311d3ac034aab753633ceb2779a1efbba5c7d
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: kinesis,firehose,sqs,events
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
      - image: pocket/snowplow-micro:prod
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db --aws
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run test-integrations  -- --ci --watchAll=false --forceExit

  test_specs:
    description: Run spec tests
    docker:
      - image: circleci/node:16.13.1@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    steps:
      - checkout
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: run tests
          command: npm run test

workflows:
  all:
    jobs:
      - test_specs:
          <<: *not_main
          context: pocket
          name: test_specs

      - test_integrations:
          <<: *not_main
          context: pocket
          name: test_integrations

      - build:
          context: pocket
          <<: *slack-fail-post-step

      - apollo:
          context: pocket
          requires:
            - build
          <<: *slack-fail-post-step

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: listapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: ListAPI-Dev
          codebuild-project-branch: dev
          repo-name: listapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: ListAPI-Dev-CodePipeline
          codebuild-project-name: ListAPI-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: *only_main
          <<: *slack-fail-post-step
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: ListAPI-Prod
          codebuild-project-branch: main
          repo-name: listapi-prod-app
          ecr-url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          <<: *slack-fail-post-step
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: ListAPI-Prod-CodePipeline
          codebuild-project-name: ListAPI-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          <<: *slack-fail-post-step
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ListAPI

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ListAPI

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/list-api
          sentry_project_name: list-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/list-api
          sentry_project_name: list-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
