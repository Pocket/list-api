scalar Url

"""
Interface that all state based entities must implement
"""
interface RemoteEntity {
  """
  For tags entity, id denotes the unique tag Id.
  For savedItems, id denotes the itemId.
  Along with the userId provided in the header, we will use id to fetch savedItems/tags for the user.
  """
  id: ID!
  """
  Unix timestamp of when the entity was created
  """
  _createdAt: Int
  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both). If all fields are null,
by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String
  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int
  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  """
  last: Int
}

"""
Represents a Pocket Item that a user has saved to their list.
(Said otherways, indicates a saved url to a users list and associated user specific information.)
"""
type SavedItem implements RemoteEntity @key(fields: "id") @key(fields: "url") {
  """
  The url the user saved to their list
  """
  url: String!
  """
  Helper property to indicate if the SavedItem is favorited
  """
  isFavorite: Boolean!
  """
  Timestamp that the SavedItem became favorited, null if not favorited
  """
  favoritedAt: Int
  """
  Helper property to indicate if the SavedItem is archived
  """
  isArchived: Boolean!
  """
  Timestamp that the SavedItem became archied, null if not archived
  """
  archivedAt: Int
  """
  Link to the underlying Pocket Item for the URL
  """
  item: ItemResult!
  """
  The Tags assocaited with this SavedItem
  """
  tags: [Tag!]
  """
  The status of this SavedItem
  """
  status: SavedItemStatus
  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!
  """
  Unix timestamp of when the entity was created
  """
  _createdAt: Int!
  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}
enum SavedItemStatus {
  ARCHIVED
  DELETED
  HIDDEN
  UNREAD
}
"""
Represents a Tag that a User has created for their list
"""
type Tag implements RemoteEntity {
  """
  The actual tag string the user created for their list
  """
  name: String!
  #Future: maybe other properties like icon.
  """
  paginated listing of all SavedItems associated with this Tag for the user
  """
  savedItems(
    filter: SavedItemsFilter
    sort: SavedItemsSort
    pagination: PaginationInput
  ): SavedItemConnection
  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!
  """
  Unix timestamp of when the entity was created
  """
  _createdAt: Int
  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}
"""
Input field for upserting a SavedItem
"""
input SavedItemUpsertInput {
  """
  The url to create/update the SavedItem with. (the url to save to the list)
  """
  url: String!
  """
  Optional, create/update the SavedItem as a favorited item
  """
  isFavorite: Boolean
  """
  Optional, time that request was submitted by client epoch/unix time
  """
  timestamp: Int
}
"""
A SavedItem can be one of these content types
"""
enum SavedItemsContentType {
  VIDEO
  ARTICLE
}
"""
Valid statuses a client may use to filter SavedItems
"""
enum SavedItemStatusFilter {
  UNREAD
  ARCHIVED
  HIDDEN
}
"""
Input field for filtering a user's list
"""
input SavedItemsFilter {
  """
  Optional, filter to get SavedItems updated since a unix timestamp
  """
  updatedSince: Int
  """
  Optional, filter to get SavedItems that have been favorited
  """
  isFavorite: Boolean
  """
  Optional, filter to get SavedItems that have been archived.
  This field is deprecated. Use status instead.
  TODO: Add deprecate tag once input field deprecation is enabled.
  Ref: https://github.com/apollographql/federation/issues/912
  """
  isArchived: Boolean
  """
  Optional, filter to get SavedItems associated to the specified Tag.
  """
  tagIds: [ID!]
  """
  Optional, filter to get SavedItems associated to the specified Tag name.
  To get untagged items, include the string '_untagged_'.
  """
  tagNames: [String!] # _untagged_
  """
  Optional, filter to get SavedItems with highlights
  """
  isHighlighted: Boolean
  """
  Optional, filter to get SavedItems based on content type
  """
  contentType: SavedItemsContentType
  """
  Optional, filter to get user items based on status.
  """
  status: SavedItemStatusFilter
}
"""
An edge in a connection.
"""
type SavedItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The SavedItem at the end of the edge.
  """
  node: SavedItem
}
"""
The connection type for SavedItem.
"""
type SavedItemConnection {
  """
  A list of edges.
  """
  edges: [SavedItemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of SavedItems in the connection.
  """
  totalCount: Int!
}
"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of Tags in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The Tag at the end of the edge.
  """
  node: Tag
}
"""
Input field for setting all Tag associations on a SavedItem.
"""
input SavedItemTagUpdateInput {
  """
  The SavedItem ID to associate Tags to
  """
  savedItemId: ID!
  """
  The set of Tag IDs to associate to the SavedItem
  """
  tagIds: [ID!]!
}
"""
Input field for creating a Tag
"""
input TagCreateInput {
  """
  The user provided tag string
  """
  name: String!
  """
  ID of the SavedItem to associate with this Tag
  """
  savedItemId: ID!
}
"""
Input field for updating a Tag
"""
input TagUpdateInput {
  """
  Tag ID
  """
  id: ID!
  """
  The updated tag string
  """
  name: String!
}
"""
Enum to specify the sort order of SavedItems fetched
"""
enum SavedItemsSortOrder {
  ASC
  DESC
}
"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum SavedItemsSortBy {
  CREATED_AT
  UPDATED_AT
  FAVORITED_AT
  ARCHIVED_AT
}

"""
Input to sort fetched SavedItems. If unspecified, defaults to CREATED_AT, ASC.
"""
input SavedItemsSort {
  """
  The field by which to sort SavedItems
  """
  sortBy: SavedItemsSortBy!

  """
  The order in which to sort SavedItems
  """
  sortOrder: SavedItemsSortOrder!
}

input DeleteSavedItemTagsInput {
  """
  The id of the SavedItem from which to delete a Tag association
  """
  savedItemId: ID!
  """
  The ids of the Tag to disassociate from the SavedItem
  """
  tagIds: [ID!]!
}

type SavedItemTagAssociation {
  """
  The ID of the SavedItem associated with the Tag
  """
  savedItemId: ID!

  """
  The ID of the Tag associated with the SavedItem
  """
  tagId: ID!
}

extend type User @key(fields: "id") {
  #Note more properties exist here but are defined in another service.

  """
  User id, provided by the user service.
  """
  id: ID! @external

  """
  Get a general paginated listing of all SavedItems for the user
  """
  savedItems(
    filter: SavedItemsFilter
    sort: SavedItemsSort
    pagination: PaginationInput
  ): SavedItemConnection

  """
  Get a paginated listing of all a user's Tags
  """
  tags(pagination: PaginationInput): TagConnection

  """
  Get a SavedItem by its id
  """
  savedItemById(id: ID!): SavedItem
}

"""
Union type for items that may or may not be processed
"""
union ItemResult = PendingItem | Item

enum PendingItemStatus {
  RESOLVED
  UNRESOLVED
}

type PendingItem @key(fields: "url") {
  """
  URL of the item that the user gave for the SavedItem
  that is pending processing by parser
  """
  url: Url!
  status: PendingItemStatus
}

extend type Item @key(fields: "givenUrl") {
  "key field to identify the Item entity in the Parser service"
  givenUrl: Url! @external

  #Note more properties exist here but are defined in another service.

  """
  Helper property to identify if the given item is in the user's list
  """
  savedItem: SavedItem
}

"""
Default Mutation Type
"""
type Mutation {
  """
  Updates a SavedItem, undeletes and unarchives it, bringing it to the top of the user's list, if it exists
  and creates it if it doesn't.
  """
  upsertSavedItem(input: SavedItemUpsertInput!): SavedItem!

  """
  Archives a SavedItem
  """
  updateSavedItemArchive(id: ID!): SavedItem!

  """
  Unarchives a SavedItem
  """
  updateSavedItemUnArchive(id: ID!): SavedItem!

  """
  Undo the delete operation for a SavedItem
  """
  updateSavedItemUnDelete(id: ID!): SavedItem!

  """
  Favorites a SavedItem
  """
  updateSavedItemFavorite(id: ID!): SavedItem!

  """
  Unfavorites a SavedItem
  """
  updateSavedItemUnFavorite(id: ID!): SavedItem!

  """
  Set the Tags that are associated with a SavedItem.
  Will replace any existing Tag associations on the SavedItem.
  To remove all Tags from a SavedItem, use `updateSavedItemRemoveTags`.
  """
  updateSavedItemTags(input: SavedItemTagUpdateInput!): SavedItem!

  """
  Removes all Tag associations from a SavedItem. Returns the
  SavedItem that had its Tag associations cleared.
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  updateSavedItemRemoveTags(savedItemId: ID): SavedItem!

  """
  Deletes a SavedItem from the users list. Returns ID of the
  deleted SavedItem
  """
  deleteSavedItem(id: ID!): ID!
  """
  Creates user tags that a user can use to classify SavedItems
  """
  createTags(input: [TagCreateInput!]!): [Tag!]!
  """
  Updates a Tag (renames the tag), and returns the updated Tag.
  If a Tag with the updated name already exists in the database, will
  associate that Tag to all relevant SavedItems rather than creating
  a duplicate Tag object.
  """
  updateTag(input: TagUpdateInput!): Tag!
  """
  Deletes a Tag object. This is deletes the Tag and all SavedItem associations
  (removes the Tag from all SavedItems). Returns ID of the deleted Tag.
  """
  deleteTag(id: ID!): ID!
  """
  Deletes the association between a Tag and a SavedItem
  (removes a Tag from a SavedItem).
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  deleteSavedItemTags(
    input: [DeleteSavedItemTagsInput!]!
  ): [SavedItemTagAssociation]
}
